/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jvminspector;

import com.sun.tools.attach.VirtualMachine;
import com.sun.tools.attach.VirtualMachineDescriptor;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dialog;
import java.awt.EventQueue;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.ForkJoinPool;
import java.util.stream.Collectors;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;

/**
 *
 * @author pleybert
 */
public final class MainWindow extends javax.swing.JDialog {
	
	private final Path output_path_;
	
	public MainWindow() {
		super((Dialog)null, true);
		//
		try {
			output_path_ = Files.createTempDirectory("bytedump");
		} catch (IOException ex) {
			throw new RuntimeException(ex);
		}
		//
		initComponents();
		//
		combobox_VMs.setRenderer(new DefaultListCellRenderer() {
			@Override
			public Component getListCellRendererComponent(JList listview, Object value, int index, boolean isSelected, boolean cellHasFocus) {
				Component component = super.getListCellRendererComponent(listview, value, index, isSelected, cellHasFocus);
				if (component instanceof JLabel) {
					if (value instanceof VirtualMachineDescriptor) {
						JLabel label = (JLabel)component;
						VirtualMachineDescriptor vm = (VirtualMachineDescriptor)value;
						label.setText(vm_to_string(vm));
						listview.setToolTipText(vm_to_string(vm));
					}
				}
				return component;
			}
		});
		//
		treeview.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		treeview.addTreeSelectionListener((TreeSelectionEvent e) -> {
			Object object = treeview.getLastSelectedPathComponent();
			if (object instanceof Node) {
				Node node = (Node)object;
				if (node.isLeaf()) {
					set_wait_cursor(true);
					ForkJoinPool.commonPool().submit(() -> {
						DumpAgent.dump_class(get_current_vm(), node.getFullPath(), output_path_.toString());
						EventQueue.invokeLater(() -> {
							try {
								Optional<Path> opt =
										Files.walk(output_path_)
												.filter(path -> path.toString().endsWith(node.getName()+".java"))
												.findFirst();
								if (opt.isPresent()) {
									editor.setText( Files.lines(opt.get()).collect(Collectors.joining("\n")) );
								} else {
									editor.setText("could not find java file in "+output_path_);
								}
							} catch (IOException ex) {
								throw new RuntimeException(ex);
							} finally {
								set_wait_cursor(false);
							}
						});
					});
				}
			}
		});
		//
		editor.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
		editor.setCodeFoldingEnabled(true);
		//
		update_vms_list();
	}
	
	private void set_wait_cursor(boolean state) {
		if (state) {
			MainWindow.this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
		} else {
			MainWindow.this.setCursor(Cursor.getDefaultCursor());
		}
	}
	
	public String vm_to_string(VirtualMachineDescriptor vm) {
		return vm.id() + " " + vm.displayName();
	}
	
	public void update_vms_list() {
		List<VirtualMachineDescriptor> vms =
		VirtualMachine
				.list()
				.stream()
				.filter(vm -> !vm.displayName().contains("jvminspector"))
				.collect(Collectors.toList());
		System.out.println("Found "+vms.size()+" VMs");
		combobox_VMs.removeAllItems();
		vms.forEach(vm -> combobox_VMs.addItem(vm));
	}
	
	private void update_vm_tree(VirtualMachineDescriptor vm) {
		set_wait_cursor(true);
		ForkJoinPool.commonPool().submit(() -> {
			Set<String> classnames = DumpAgent.list_classes(vm);
			System.out.println("got "+classnames.size()+" names");
			Node hidden_root = TreeBuilder.build(vm_to_string(vm), classnames);
			EventQueue.invokeLater(() -> {
				treeview.setModel(new DefaultTreeModel(hidden_root));
				treeview.setRootVisible(true);
				set_wait_cursor(false);
			});
		});
	}
	
	private VirtualMachineDescriptor get_current_vm() {
		int index = combobox_VMs.getSelectedIndex();
		if (index >= 0 && index < combobox_VMs.getItemCount()) {
			return combobox_VMs.getItemAt(index);
		}
		return null;
	}
	
	private void current_vm_changed() {
		VirtualMachineDescriptor vm = get_current_vm();
		if (vm != null) {
			update_vm_tree(vm);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        button_reload_vms = new javax.swing.JButton();
        combobox_VMs = new javax.swing.JComboBox<>();
        button_dump = new javax.swing.JButton();
        scrollpane_treeview = new javax.swing.JScrollPane();
        treeview = new javax.swing.JTree();
        scrollpane_editor = new javax.swing.JScrollPane();
        editor = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("JVM Inspector");
        setMinimumSize(new java.awt.Dimension(1024, 768));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {30, 300, 30, 200};
        layout.rowHeights = new int[] {40, 100};
        layout.columnWeights = new double[] {0.0, 0.0, 0.0, 1.0};
        layout.rowWeights = new double[] {0.0, 1.0};
        getContentPane().setLayout(layout);

        button_reload_vms.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jvminspector/res/reload.png"))); // NOI18N
        button_reload_vms.setToolTipText("refresh available JVMs");
        button_reload_vms.setMaximumSize(new java.awt.Dimension(30, 30));
        button_reload_vms.setMinimumSize(new java.awt.Dimension(30, 30));
        button_reload_vms.setPreferredSize(new java.awt.Dimension(30, 30));
        button_reload_vms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_reload_vmsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(button_reload_vms, gridBagConstraints);

        combobox_VMs.setMinimumSize(new java.awt.Dimension(28, 30));
        combobox_VMs.setPreferredSize(new java.awt.Dimension(28, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(combobox_VMs, gridBagConstraints);

        button_dump.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jvminspector/res/dump.png"))); // NOI18N
        button_dump.setToolTipText("fetch JVM classes");
        button_dump.setMaximumSize(new java.awt.Dimension(30, 30));
        button_dump.setMinimumSize(new java.awt.Dimension(30, 30));
        button_dump.setPreferredSize(new java.awt.Dimension(30, 30));
        button_dump.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_dumpActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(button_dump, gridBagConstraints);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treeview.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treeview.setRootVisible(false);
        treeview.setShowsRootHandles(true);
        scrollpane_treeview.setViewportView(treeview);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(scrollpane_treeview, gridBagConstraints);

        editor.setColumns(20);
        editor.setRows(5);
        scrollpane_editor.setViewportView(editor);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(scrollpane_editor, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_reload_vmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_reload_vmsActionPerformed
        update_vms_list();
    }//GEN-LAST:event_button_reload_vmsActionPerformed

    private void button_dumpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_dumpActionPerformed
        current_vm_changed();
    }//GEN-LAST:event_button_dumpActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_dump;
    private javax.swing.JButton button_reload_vms;
    private javax.swing.JComboBox<VirtualMachineDescriptor> combobox_VMs;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea editor;
    private javax.swing.JScrollPane scrollpane_editor;
    private javax.swing.JScrollPane scrollpane_treeview;
    private javax.swing.JTree treeview;
    // End of variables declaration//GEN-END:variables
}
